package com.kernohad;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BeanPropertyBindingResult;
import org.springframework.validation.Errors;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;
import javax.validation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

/**
 * Created by user on 5/24/2017.
 */
@Controller // This means that this class is a controller
@RequestMapping(path="/demo")   // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired  // This means to get the bean called 'userRepository'
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private int USERS_ON_PAGE = 10;


    @RequestMapping("/")
    public String index(@ModelAttribute User user, Model model) {
        model.addAttribute("user", user);
        return "form";
    }


    @RequestMapping(path = "/add", method = RequestMethod.POST)    // Map ONLY POST Requests
    public String addNewUser(@ModelAttribute User user, Model model, RedirectAttributes redirectAttrs) {
        // @ResponseBody means the returned String is the response, not a view name
        model.addAttribute("user", user);
        validate(user, redirectAttrs);
        return "redirect:/demo/";   // Redirects to the RequestMapping"/" which calls the form.html

    }

    @RequestMapping(path = "/edit", method = RequestMethod.POST)    // Map ONLY POST Requests
    public @ResponseBody
    String editUser(@ModelAttribute User user, Model model, RedirectAttributes redirectAttrs) {
        // @ResponseBody means the returned String is the response, not a view name

        model.addAttribute("user", user);
        if (validate(user, redirectAttrs))
            return "success";
        return redirectAttrs.getFlashAttributes().get("message").toString();
    }

    @RequestMapping(path = "/remove/{id}", method = RequestMethod.POST)    // Map ONLY POST Requests
    public String removeUser(@PathVariable Long id, RedirectAttributes redirectAttrs) {       // RedirectAttribute sends an attribute to the next model made.
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        redirectAttrs.addFlashAttribute("message", "User Removed");                                        // flash attributes are automatically added to the model of the controller that serves the target URL.
        userRepository.delete(userRepository.findOne(id));
        return "redirect:/demo/";   // Redirects to the RequestMapping"/" which calls the form.html
    }


    @RequestMapping(path = "/all")
    public String getAllUsers(int pageNumber, Model model) {
        Page<User> users = userRepository.findAll(new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        setUpModel(model, new User(), users, "all");
        model.addAttribute("numberOfPages", users.getTotalPages());
        return "table";
    }


    @RequestMapping(path = "/search")
    public String searchUsers(int pageNumber, @ModelAttribute User user, Model model) {


        Page<User> users = userRepository.searchNameEmailId(user.getName(), user.getEmail(), user.getId(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));

        if(user.getName() == "" && user.getEmail() == ""){
            users = userRepository.searchId(user.getId(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }
        else if(user.getId() == null && user.getEmail() == ""){
            users = userRepository.searchName(user.getName(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }
        else if(user.getId() == null && user.getName() == ""){
            users = userRepository.searchEmail(user.getEmail(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }
        else if(user.getEmail() == ""){
            users = userRepository.searchIdName(user.getName(), user.getId(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }
        else if(user.getName() == ""){
            users = userRepository.searchIdEmail(user.getEmail(), user.getId(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }
        else if(user.getId() == null){
            users = userRepository.searchNameEmail(user.getName(), user.getEmail(), new PageRequest(pageNumber - 1, USERS_ON_PAGE));
        }




        //Source: http://docs.jboss.org/hibernate/orm/5.2/userguide/html_single/Hibernate_User_Guide.html#criteria
//        EntityManager entityManager;
//        CriteriaBuilder builder = entityManager.getCriteriaBuilder();
//        CriteriaQuery<User> criteria = builder.createQuery(User.class);
//        Root<User> root = criteria.from(User.class);
//        criteria.select( root );
//        criteria.where( builder.equal( root.get( user.getName()), "Dylan") );
//
//        List<User> users = entityManager.createQuery( criteria ).getResultList();
        // Other sources: http://www.baeldung.com/jpa-pagination
        //                https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl/
        //                https://docs.spring.io/spring-data/jpa/docs/current/reference/html/



        setUpModel(model, user, users, "search");
        int numberOfPages = users.getTotalPages();
        if( numberOfPages <= 0 )
            numberOfPages = 1;


        model.addAttribute("numberOfPages", numberOfPages);
        return "table";

    }

    public void setUpModel(Model model, User user, Page<User> users, String tag) {
        model.addAttribute("user", user);
        model.addAttribute("list", users);

        model.addAttribute("tag", tag);
    }


    private boolean validate(@Valid User user, RedirectAttributes redirectAttrs) {
        UserValidator validator = new UserValidator();
        EmailValidator emailValidator = new EmailValidator();


        //http://www.baeldung.com/javax-validation
        //=========================================================================================================
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator beanValidator = factory.getValidator();

        Set<ConstraintViolation<User>> violations = beanValidator.validate(user);

        String message = "";
        if (violations.size() > 0) {
            for (ConstraintViolation<User> violation : violations) {
                message = message + "Error: " + violation.getMessage();
            }
            redirectAttrs.addFlashAttribute("message", message);
            redirectAttrs.addFlashAttribute(user);
            return false;
        }
        //=========================================================================================================

        Errors errors = new BeanPropertyBindingResult(user, "objectName");
        validator.validate(user, errors);
        if (errors.getErrorCount() > 0) {
            if (errors.hasFieldErrors("name")) {
                redirectAttrs.addFlashAttribute("message", "Error: 'Name' is empty.");
                redirectAttrs.addFlashAttribute(user);
                return false;
            } else if (errors.hasFieldErrors("email")) {
                redirectAttrs.addFlashAttribute("message", "Error: 'Email' is empty.");
                redirectAttrs.addFlashAttribute(user);
                return false;
            }


        } else if (!emailValidator.validate(user.getEmail())) {
            redirectAttrs.addFlashAttribute("message", "Error: Not a valid email. Ex: valid@em.ail");
            redirectAttrs.addFlashAttribute(user);
            return false;
        } else {
            userRepository.save(user);
            redirectAttrs.addFlashAttribute("message", "User Saved");

        }
        return true;

    }
}


