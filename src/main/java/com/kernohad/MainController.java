package com.kernohad;

import com.kernohad.User;
import com.kernohad.UserRepository;
import com.sun.xml.internal.bind.v2.model.core.ID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.annotation.Id;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.ArrayList;

/**
 * Created by user on 5/24/2017.
 */
@Controller // This means that this class is a controller
@RequestMapping(path="/demo")   // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired  // This means to get the bean called 'userRepository'
                // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @RequestMapping("/")
    public String index(Model model){
        model.addAttribute("user", new User());
        return "form";
    }


    @RequestMapping(path="/add", method=RequestMethod.POST)    // Map ONLY POST Requests
    public String addNewUser (@ModelAttribute User user, Model model, RedirectAttributes redirectAttrs) {
        // @ResponseBody means the returned String is the response, not a view name
        model.addAttribute("user", user);
        redirectAttrs.addFlashAttribute("message", "User Saved");
        userRepository.save(user);
        return "redirect:/demo/";   // Redirects to the RequestMapping"/" which calls the form.html
    }

    @RequestMapping(path="/remove", method=RequestMethod.POST)    // Map ONLY POST Requests
    public String removeUser (@ModelAttribute User user, Model model, RedirectAttributes redirectAttrs) {       // RedirectAttribute sends an attribute to the next model made.
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        model.addAttribute("user", user);
        redirectAttrs.addFlashAttribute("message", "User Removed");                                        // flash attributes are automatically added to the model of the controller that serves the target URL.
        userRepository.delete(userRepository.findUser(user.getName(), user.getEmail()));
        return "redirect:/demo/";   // Redirects to the RequestMapping"/" which calls the form.html
    }


    @RequestMapping(path="/all", method=RequestMethod.GET)
    public  String getAllUsers(Model model) {



        model.addAttribute("list", userRepository.findAll());


        return "table";
    }
}
